David Brown 404260577
Sam Sobell 704277487

Lab 1 part a)
This part is rather simple, and is broken up into two parts.

The make_stream function has dual function, it acts as both our syntax checker
and input beautifier. This make_stream then passes the beautified complete command
tree string into the generate command tree which then actually performs the parsing of
the commands. This method is effective because it allows us to know that we are parsing
only valid syntax (the only syntax error make_stream does not check for is having the 
proper ratio of operands to operators). Once generate command tree outputs the command tree
the make_stream function adds the command tree to the command stream and then goes ahead building
the next command tree string. This separation also allows for our code to be split into parts
making the code easier to test and service.

The generate command tree function makes use of two stacks a command stack and an operator
stack to keep track of operators and operands. Using a similar concept as post-fix notation
we are able to utilize the two stacks to effectively determine the order of parsed commands.

Lab 1 part b)
This part of the lab we execute the command tree made in part a. In order to do this we traverse through
the command tree using a DFS recursive algorithm. At each level we fork the main process execute the command
below and then exit with the exitstatus. Our implementation is very robust because it gaurantees that we always
keep at least one copy of the original parent process. We also gaurantee that whenever we call execvp it is called
on its own separate process so when it exits it wont accidentally kill something that wasn't meant to be killed.
This method also allows for us to easily perform redirects as if we need to change an I/O we simply change it then,
go down using the correct redirect then once we return to the process that called for the redirect change
we can just revert it and then go back up as if nothing ever changed for the commands above it.
